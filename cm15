#!/usr/bin/python

# This file is part of AutoMateHome.
#
# AutoMateHome is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# AutoMateHome is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with AutoMateHome.  If not, see <http://www.gnu.org/licenses/>.

import x10_powerline
import cm15_USB
import utils

import datetime
import logging
import os
import Queue
import sys
import threading
import traceback

DEVICE_POWER_FAIL = 0xa5
DEVICE_POLL_PC = 0x5a
DEVICE_MACRO_ADDR = 0x5b
DEVICE_ACK = 0x55

CMD_DUMPMEM = 0xbd

DEFAULT_DEVICE_TIMEOUT_SECONDS = 3.5

logging.basicConfig(format="%(asctime)-15s [%(threadName)s] %(levelname)s: %(message)s")
LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.DEBUG)
cm15_USB.LOGGER.setLevel(logging.INFO)

class cm15:
  "Abstraction of the CM15 device."

  def __init__(self, housecode):

    self.device = cm15_USB.CM15()
    self.deviceResponseQueue = Queue.Queue()
    self.housecode = housecode

    # setup a dedicated thread to process callbacks from the device:
    readThreadStartedLatch = utils.Latch()
    readThread = threading.Thread(name="CM15ReadThread", target=lambda: self.__readDevice(readThreadStartedLatch))
    readThread.daemon = True
    LOGGER.debug("starting reader thread")
    readThread.start()
    readThreadStartedLatch.waitForIt(5)
    LOGGER.debug("read thread started, waiting for input")
    
    # locks to block further requests to the device while we are
    # waiting for a response from it:
    self.awaitingResponseMethodLock = threading.Lock()
    self.awaitingResponseLock = threading.Condition()
    self.awaitingResponse = False

  
  def send_function(self, housecode, addressOrAddresses, function, dims=0):

    def isDimOrBright(fcode):
      return fcode == x10_powerline.UNDERSCORED_LOWERCASE_FUNCTION_TO_CODE_MAP["dim"] or \
          fcode == x10_powerline.UNDERSCORED_LOWERCASE_FUNCTION_TO_CODE_MAP["bright"]

    if not hasattr(addressOrAddresses, "__iter__"):
      addressOrAddresses = [addressOrAddresses]
    try:
      for a in addressOrAddresses:
        data = x10_powerline.header_and_address(housecode, a)
        self.__send_and_await_response(data, DEFAULT_DEVICE_TIMEOUT_SECONDS, True)
      data = x10_powerline.header_and_standard_function(housecode, function, 0) # always send dims of zero in the header, even for dim/bright command
      timeout = DEFAULT_DEVICE_TIMEOUT_SECONDS
      fcode = ord(data[1]) & 0xf
      if isDimOrBright(fcode):
        timeout *= 2
        # cm15 seems to want us to send dims as an additional byte (value 0-210),
        # this is a departure from protocol.txt, which only specifies
        # this for reading from the device
        data += chr(max(0, min(210, int(dims)))) 
      self.__send_and_await_response(data, timeout, True)
    except Exception, e:
      exc_type, exc_value, exc_traceback = sys.exc_info()
      msg = traceback.format_exception(exc_type, exc_value, exc_traceback);
      LOGGER.error("\n".join(msg))

  def send_raw(self, data, timeout = DEFAULT_DEVICE_TIMEOUT_SECONDS):
    return self.__send_and_await_response(data, timeout, False)

  def set_clock(self, time = datetime.datetime.now()):
    setClockBytes = x10_powerline.encodeClockBytes(self.housecode, time)
    self.device.write("\x9b" + setClockBytes)

  def __send_and_await_response(self, data, timeoutInSeconds, expectDeviceAck = False):
    with self.awaitingResponseMethodLock: # synchronize all calls to this method
      try:
        with self.awaitingResponseLock:
          self.awaitingResponse = True
        self.device.write(data)
        LOGGER.info("written to device %s" % ", ".join(["0x%02x" % ord(c) for c in data]))
        response = self.deviceResponseQueue.get(True, timeoutInSeconds)
        self.deviceResponseQueue.task_done()
        if expectDeviceAck:
          if response[0] != DEVICE_ACK:
            raise Exception("did not receive expected ACK for device request")
          if len(response) != 1:
            LOGGER.error("unexpected data following DEVICE_ACK: " + utils.bytes_to_printed_bytes(response))
        return response

      except Queue.Empty:
        raise Exception("timed out waiting for response from device")
      finally:
        with self.awaitingResponseLock:
          self.awaitingResponse = False

  # thread worker method which blocks waiting for input from the device, then processes it.
  def __readDevice(self, startedLatch):

    class DataBuffer:
      def __init__(self):
        self.size = 0
        self.data = None

      def reset(self):
        if self.data is not None:
          LOGGER.error("new data buffer started when previous incomplete, expected %d byte(s), got %d, data: %s" % 
                       (self.size, len(self.data), utils.bytes_to_printed_bytes(self.data)))
        self.data = None
        self.size = 0
      
    startedLatch.open()
    buf = DataBuffer()
    
    while True:
      try:
        data = self.device.read()
        if data is None:
          continue
        printedBytes = utils.bytes_to_printed_bytes(data)

        # there is data from the device, and we need to decide what to do about it.
        # a) if there is a synchronous request pending, put the data on the return queue.
        # b) otherwise deal with it on this thread

        # Note: when receiving multi-part responses from the device,
        # this code looks like it has a race condition as the device
        # might interleave data from e.g. powerline events with the
        # response parts. Also, between parts we do not block clients
        # from making new requests to the device to which it might
        # respond immediately. We assume that the device will not do
        # this and will queue responses in meaningful, complete
        # chunks. There is very little we can do externally about the
        # first case, and the second is also difficult to deal with
        # without introducing yet more timeouts.

        LOGGER.debug("received data from device: " + printedBytes)
        with self.awaitingResponseLock:

          if self.awaitingResponse:
            self.deviceResponseQueue.put(data)
            continue
            
          firstByte = data[0]

          if firstByte == DEVICE_POLL_PC:
            buf.reset()
            buf.size = data[1]
            buf.data = data[2:]

          elif firstByte == DEVICE_ACK:
            buf.reset()
            # I guess this shouldn't happen
            LOGGER.info("DEVICE: unsolicited ACK")
            if len(data) != 1:
              LOGGER.error("DEVICE: unexpected data following DEVICE_ACK: " + printedBytes)

          elif firstByte == DEVICE_POWER_FAIL :
            LOGGER.info("DEVICE: resync after power failed")
            buf.reset()
            try:
              self.set_clock()
            except Exception, e:
              exc_type, exc_value, exc_traceback = sys.exc_info()
              msg = traceback.format_exception(exc_type, exc_value, exc_traceback);
              LOGGER.error("\n".join(msg))

          elif firstByte == DEVICE_MACRO_ADDR:
            buf.reset()
            highbyte = data[1] & 0x03 # only bits 1 and 2
            lowbyte  = data[2:]
            address = (highbyte * 0x100) + lowbyte
            msg = utils.bytes_to_printed_bytes(data)
            LOGGER.info("DEVICE: macro address 0x%(address)0x - %(msg)s" % locals())
            
          else:
            if buf.data is None:
              LOGGER.error("DEVICE: unexpected data - " + printedBytes)
            else:
              buf.data.extend(data)

          if buf.data is not None:
            if len(buf.data) > buf.size:
              LOGGER.error("DEVICE: recieved more data than expected from poll request: size %d, len %d, data %s" % 
                           (buf.size, len(buf.data), utils.bytes_to_printed_bytes(buf.data)))
              buffer = None
              size = 0
            elif len(buf.data) == buf.size:
              LOGGER.info("DEVICE: received complete poll request: %s" % utils.bytes_to_printed_bytes(buf.data))
              # TODO: further processing here.
              buf.reset()
    
      except Exception, e:
        exc_type, exc_value, exc_traceback = sys.exc_info()
        msg = traceback.format_exception(exc_type, exc_value, exc_traceback);
        LOGGER.error("\n".join(msg))
        
                
def print_usage(stream = sys.stderr):
  prog = os.path.basename(sys.argv[0])
  usage = """USAGE: %(prog)s --housecode [A-P]\n"""
  stream.write(usage % locals())

def main():

  import readline
  import traceback
  import getopt

  housecode = None
  (opts, remainargs) = getopt.getopt(sys.argv[1:], "hc:", ["help", "housecode="])
  for k,v in opts:
    if k in ("-?", "-h", "--help"):
      print_usage()
      sys.exit(0)
    elif k in ("-c", "--housecode"):
      housecode = v.upper()
  
  if housecode is None:
    print_usage()
    sys.exit(1)

  histfile = os.path.join(os.path.expanduser("~"), ".x10history")
  try:
      readline.read_history_file(histfile)
  except IOError:
      pass
  import atexit
  atexit.register(readline.write_history_file, histfile)
  
  x10device = cm15(housecode)

  continueLooping = True

  # interactive session which knows how to send simple functions and raw data to the device
  while continueLooping:
    try:
      line = raw_input("x10> ")
      tokens = line.split()
      if len(tokens) == 0:
        continue
      if tokens[0] == "send":
        funcargs = tokens[1:]
        if len(funcargs) < 3 or len(funcargs) > 4:
          print "ERROR - USAGE: send <housecode> <unitcode_or_codes> <function> [<dims>]"
          continue
        funcargs[1] = eval(funcargs[1])
        x10device.send_function(*funcargs)
      elif tokens[0] == "send_raw":
        data = "".join(tokens[1:])
        data = utils.printed_bytes_to_bytes(data)
        x10device.send_raw(utils.bytes_2_str(data))
      elif tokens[0] == "quit":
        continueLooping = False
    except EOFError:
      continueLooping = False
    except:
      traceback.print_exc()

if __name__ == "__main__":
  main()
